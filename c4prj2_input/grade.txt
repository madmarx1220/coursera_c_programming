Grading at Thu Apr 29 05:33:41 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==191== Memcheck, a memory error detector
==191== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==191== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==191== Command: ./tester h.txt d.txt
==191== Parent PID: 190
==191== 
==191== Argument 'size' of function malloc has a fishy (possibly negative) value: -86000322
==191==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==191==    by 0x400B5A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==191==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==191==    by 0x401B5E: main (test-input.c:69)
==191== 
==191== Invalid write of size 1
==191==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==191==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==191==    by 0x401B5E: main (test-input.c:69)
==191==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==191== 
==191== 
==191== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==191==  Access not within mapped region at address 0x0
==191==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==191==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==191==    by 0x401B5E: main (test-input.c:69)
==191==  If you believe this happened as a result of a stack
==191==  overflow in your program's main thread (unlikely but
==191==  possible), you can try to increase the size of the
==191==  main thread stack using the --main-stacksize= flag.
==191==  The main thread stack size used in this run was 8388608.
==191== 
==191== HEAP SUMMARY:
==191==     in use at exit: 792 bytes in 11 blocks
==191==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==191== 
==191== LEAK SUMMARY:
==191==    definitely lost: 0 bytes in 0 blocks
==191==    indirectly lost: 0 bytes in 0 blocks
==191==      possibly lost: 0 bytes in 0 blocks
==191==    still reachable: 792 bytes in 11 blocks
==191==         suppressed: 0 bytes in 0 blocks
==191== Rerun with --leak-check=full to see details of leaked memory
==191== 
==191== For counts of detected and suppressed errors, rerun with: -v
==191== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==197== Memcheck, a memory error detector
==197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==197== Command: ./tester i1 i2
==197== Parent PID: 196
==197== 
==197== Argument 'size' of function malloc has a fishy (possibly negative) value: -86000322
==197==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==197==    by 0x400B5A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==197==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==197==    by 0x401B5E: main (test-input.c:69)
==197== 
==197== Invalid write of size 1
==197==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==197==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==197==    by 0x401B5E: main (test-input.c:69)
==197==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==197== 
==197== 
==197== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==197==  Access not within mapped region at address 0x0
==197==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==197==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==197==    by 0x401B5E: main (test-input.c:69)
==197==  If you believe this happened as a result of a stack
==197==  overflow in your program's main thread (unlikely but
==197==  possible), you can try to increase the size of the
==197==  main thread stack using the --main-stacksize= flag.
==197==  The main thread stack size used in this run was 8388608.
==197== 
==197== HEAP SUMMARY:
==197==     in use at exit: 864 bytes in 15 blocks
==197==   total heap usage: 26 allocs, 11 frees, 5,134 bytes allocated
==197== 
==197== LEAK SUMMARY:
==197==    definitely lost: 0 bytes in 0 blocks
==197==    indirectly lost: 0 bytes in 0 blocks
==197==      possibly lost: 0 bytes in 0 blocks
==197==    still reachable: 864 bytes in 15 blocks
==197==         suppressed: 0 bytes in 0 blocks
==197== Rerun with --leak-check=full to see details of leaked memory
==197== 
==197== For counts of detected and suppressed errors, rerun with: -v
==197== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
