Grading at Wed Apr 28 05:09:31 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==458== Memcheck, a memory error detector
==458== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==458== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==458== Command: ./tester h.txt d.txt
==458== Parent PID: 457
==458== 
==458== Argument 'size' of function malloc has a fishy (possibly negative) value: -86000322
==458==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==458==    by 0x400B5A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==458==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==458==    by 0x401B2B: main (test-input.c:69)
==458== 
==458== Invalid write of size 1
==458==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==458==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==458==    by 0x401B2B: main (test-input.c:69)
==458==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==458== 
==458== 
==458== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==458==  Access not within mapped region at address 0x0
==458==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==458==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==458==    by 0x401B2B: main (test-input.c:69)
==458==  If you believe this happened as a result of a stack
==458==  overflow in your program's main thread (unlikely but
==458==  possible), you can try to increase the size of the
==458==  main thread stack using the --main-stacksize= flag.
==458==  The main thread stack size used in this run was 8388608.
==458== 
==458== HEAP SUMMARY:
==458==     in use at exit: 792 bytes in 11 blocks
==458==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==458== 
==458== LEAK SUMMARY:
==458==    definitely lost: 0 bytes in 0 blocks
==458==    indirectly lost: 0 bytes in 0 blocks
==458==      possibly lost: 0 bytes in 0 blocks
==458==    still reachable: 792 bytes in 11 blocks
==458==         suppressed: 0 bytes in 0 blocks
==458== Rerun with --leak-check=full to see details of leaked memory
==458== 
==458== For counts of detected and suppressed errors, rerun with: -v
==458== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==464== Memcheck, a memory error detector
==464== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==464== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==464== Command: ./tester i1 i2
==464== Parent PID: 463
==464== 
==464== Argument 'size' of function malloc has a fishy (possibly negative) value: -86000322
==464==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==464==    by 0x400B5A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==464==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==464==    by 0x401B2B: main (test-input.c:69)
==464== 
==464== Invalid write of size 1
==464==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==464==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==464==    by 0x401B2B: main (test-input.c:69)
==464==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==464== 
==464== 
==464== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==464==  Access not within mapped region at address 0x0
==464==    at 0x400B7C: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==464==    by 0x400D51: read_input (in /graderhome/work/c4prj2_input/tester)
==464==    by 0x401B2B: main (test-input.c:69)
==464==  If you believe this happened as a result of a stack
==464==  overflow in your program's main thread (unlikely but
==464==  possible), you can try to increase the size of the
==464==  main thread stack using the --main-stacksize= flag.
==464==  The main thread stack size used in this run was 8388608.
==464== 
==464== HEAP SUMMARY:
==464==     in use at exit: 864 bytes in 15 blocks
==464==   total heap usage: 26 allocs, 11 frees, 5,134 bytes allocated
==464== 
==464== LEAK SUMMARY:
==464==    definitely lost: 0 bytes in 0 blocks
==464==    indirectly lost: 0 bytes in 0 blocks
==464==      possibly lost: 0 bytes in 0 blocks
==464==    still reachable: 864 bytes in 15 blocks
==464==         suppressed: 0 bytes in 0 blocks
==464== Rerun with --leak-check=full to see details of leaked memory
==464== 
==464== For counts of detected and suppressed errors, rerun with: -v
==464== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
