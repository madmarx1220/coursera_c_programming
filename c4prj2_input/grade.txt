Grading at Wed Apr 28 04:22:40 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==295== Memcheck, a memory error detector
==295== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==295== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==295== Command: ./tester h.txt d.txt
==295== Parent PID: 294
==295== 
==295== Invalid read of size 1
==295==    at 0x400B55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==295==  Address 0x5204328 is 0 bytes after a block of size 120 alloc'd
==295==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==295==    by 0x4EA89E7: getdelim (iogetdelim.c:62)
==295==    by 0x400D67: read_input (in /graderhome/work/c4prj2_input/tester)
==295==    by 0x401B27: main (test-input.c:69)
==295== 
==295== Invalid write of size 1
==295==    at 0x400B63: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==295==  Address 0xfff001000 is not stack'd, malloc'd or (recently) free'd
==295== 
==295== 
==295== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==295==  Access not within mapped region at address 0xFFF001000
==295==    at 0x400B63: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==295==  If you believe this happened as a result of a stack
==295==  overflow in your program's main thread (unlikely but
==295==  possible), you can try to increase the size of the
==295==  main thread stack using the --main-stacksize= flag.
==295==  The main thread stack size used in this run was 8388608.
==295== 
==295== HEAP SUMMARY:
==295==     in use at exit: 792 bytes in 11 blocks
==295==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==295== 
==295== LEAK SUMMARY:
==295==    definitely lost: 8 bytes in 1 blocks
==295==    indirectly lost: 0 bytes in 0 blocks
==295==      possibly lost: 0 bytes in 0 blocks
==295==    still reachable: 784 bytes in 10 blocks
==295==         suppressed: 0 bytes in 0 blocks
==295== Rerun with --leak-check=full to see details of leaked memory
==295== 
==295== For counts of detected and suppressed errors, rerun with: -v
==295== ERROR SUMMARY: 73 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==301== Memcheck, a memory error detector
==301== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==301== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==301== Command: ./tester i1 i2
==301== Parent PID: 300
==301== 
==301== Invalid read of size 1
==301==    at 0x400B55: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==301==  Address 0x5204328 is 0 bytes after a block of size 120 alloc'd
==301==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==301==    by 0x4EA89E7: getdelim (iogetdelim.c:62)
==301==    by 0x400D67: read_input (in /graderhome/work/c4prj2_input/tester)
==301==    by 0x401B27: main (test-input.c:69)
==301== 
==301== Invalid write of size 1
==301==    at 0x400B63: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==301==  Address 0xfff001000 is not stack'd, malloc'd or (recently) free'd
==301== 
==301== 
==301== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==301==  Access not within mapped region at address 0xFFF001000
==301==    at 0x400B63: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==301==  If you believe this happened as a result of a stack
==301==  overflow in your program's main thread (unlikely but
==301==  possible), you can try to increase the size of the
==301==  main thread stack using the --main-stacksize= flag.
==301==  The main thread stack size used in this run was 8388608.
==301== 
==301== HEAP SUMMARY:
==301==     in use at exit: 864 bytes in 15 blocks
==301==   total heap usage: 23 allocs, 8 frees, 5,128 bytes allocated
==301== 
==301== LEAK SUMMARY:
==301==    definitely lost: 56 bytes in 2 blocks
==301==    indirectly lost: 24 bytes in 3 blocks
==301==      possibly lost: 0 bytes in 0 blocks
==301==    still reachable: 784 bytes in 10 blocks
==301==         suppressed: 0 bytes in 0 blocks
==301== Rerun with --leak-check=full to see details of leaked memory
==301== 
==301== For counts of detected and suppressed errors, rerun with: -v
==301== ERROR SUMMARY: 73 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
